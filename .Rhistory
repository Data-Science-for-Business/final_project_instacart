##Step 1: IMPORT LIBRARIES
#-------------------------
if("pacman" %in% rownames(installed.packages()) == FALSE) {install.packages("pacman")}
pacman::p_load("caret","ROCR","lift","glmnet","MASS","e1071", "tidyverse", "dplyr", "GGally", "data.table", "readr")
##Step 2: LOAD THE CSV FILE
#--------------------------
insta_table <- fread(file.choose(), showProgress = FALSE)
head(insta_table, 10)
class(insta_table)
str(insta_table)
nrow(insta_table)
summary(insta_table)
glimpse(insta_table)
##Step 3: CLEAN THE DATA
#-----------------------
insta_table$user_id <- as.factor(insta_table$user_id)
insta_table$day_of_the_week <- as.factor(insta_table$day_of_the_week)
insta_table$order_id <- as.factor(insta_table$order_id)
insta_table$product_id <- as.factor(insta_table$product_id)
insta_table$order_hour_of_day <- as.factor(insta_table$order_hour_of_day)
insta_table$aisle_id <- as.factor(insta_table$aisle_id)
insta_table$department_id <- as.factor(insta_table$department_id)
insta_table$reordered <- as.factor(insta_table$reordered)
glimpse(insta_table)
map(insta_table, class)
colSums(is.na(insta_table))
##Step 2: LOAD THE CSV FILE
#--------------------------
insta_table <- fread(file.choose(), showProgress = FALSE) #choose csv part 1
insta_table_2 <- fread(file.choose(), showProgress = FALSE) #choose csv part 2
insta_table_3 <- fread(file.choose(), showProgress = FALSE) #choose csv part 3
insta_table_4 <- fread(file.choose(), showProgress = FALSE) #choose csv part 4
insta_table_test <- rbind(insta_table_1, insta_table_2, insta_table_3, insta_table_4)
##Step 2: LOAD THE CSV FILE
#--------------------------
insta_table_1 <- fread(file.choose(), showProgress = FALSE) #choose csv part 1
insta_table_2 <- fread(file.choose(), showProgress = FALSE) #choose csv part 2
insta_table_3 <- fread(file.choose(), showProgress = FALSE) #choose csv part 3
insta_table_4 <- fread(file.choose(), showProgress = FALSE) #choose csv part 4
insta_table_test <- rbind(insta_table_1, insta_table_2, insta_table_3, insta_table_4)
nrow(insta_table)
nrow(insta_table_test)
insta_table <- rbind(insta_table_1, insta_table_2, insta_table_3, insta_table_4)
nrow(insta_table_test)
##Step 5: SPLIT THE DATA
#-----------------------
insta_table_prior <- insta_table[insta_table$eval_set == 'prior',] #filter the table to only get the prior orders
insta_table_train <- insta_table[insta_table$eval_set == 'train',] #filter the table to only get the train orders
nrow(insta_table_prior)
nrow(insta_table_train)
View(head(insta_table, 50))
##Step 5: FEATURE ENGINEERING
#-----------------------
insta_table_prior_top_1000 <- View(head(insta_table_prior, 1000))
##Step 5: FEATURE ENGINEERING
#----------------------------
insta_table_prior_top_1000 <- View(head(insta_table_prior, 1000))
##Step 5: FEATURE ENGINEERING
#----------------------------
insta_table_prior_top_1000 <- (head(insta_table_prior, 1000))
insta_table_prior_top_1000 %>%
group_by(user_id, product_id) %>%
summarise(prod_count=count(product_id))
##Step 3: CLEAN THE DATA
#-----------------------
insta_table$user_id <- as.factor(insta_table$user_id)
insta_table$day_of_the_week <- as.factor(insta_table$day_of_the_week)
insta_table$order_id <- as.factor(insta_table$order_id)
insta_table$product_id <- as.factor(insta_table$product_id)
insta_table$order_hour_of_day <- as.factor(insta_table$order_hour_of_day)
insta_table$aisle_id <- as.factor(insta_table$aisle_id)
insta_table$department_id <- as.factor(insta_table$department_id)
insta_table$reordered <- as.factor(insta_table$reordered)
##Step 4: SPLIT THE DATA
#-----------------------
insta_table_prior <- insta_table[insta_table$eval_set == 'prior',] #filter the table to only get the prior orders
insta_table_train <- insta_table[insta_table$eval_set == 'train',] #filter the table to only get the train orders
nrow(insta_table_prior)
nrow(insta_table_train)
##Step 5: FEATURE ENGINEERING
#----------------------------
insta_table_prior_top_1000 <- (head(insta_table_prior, 1000))
insta_table_prior_top_1000 %>%
group_by(user_id, product_id) %>%
summarise(prod_count=count(product_id))
View(insta_table_prior_top_1000)
grouped_data
grouped_data <- aggregate(insta_table_prior_top_1000, by=list(insta_table_prior_top_1000$user_id,
insta_table_prior_top_1000$product_id), FUN=length);
grouped_data
##Step 5: FEATURE ENGINEERING
#----------------------------
insta_table_prior_top_1000 <- (head(insta_table_prior, 100))
View(insta_table_prior_top_1000)
grouped_data <- aggregate(insta_table_prior_top_1000, by=list(insta_table_prior_top_1000$user_id,
insta_table_prior_top_1000$product_id), FUN=length);
grouped_data
pacman::p_load("caret","ROCR","lift","glmnet","MASS","e1071", "tidyverse", "dplyr", "GGally", "data.table", "readr", "plyr")
counts <- ddply(insta_table_prior_top_1000, .(insta_table_prior_top_1000$user_id, insta_table_prior_top_1000$product_id), nrow)
names(counts) <- c("user_id", "product_id", "prior_purchase_count")
names(counts)
counts <- ddply(insta_table_prior_top_1000, .(insta_table_prior_top_1000$user_id, insta_table_prior_top_1000$product_id), nrow)
names(counts) <- c("user_id", "product_id", "prior_purchase_count")
names(counts)
sqldf("SELECT user_id, product_id, COUNT(*) as Freq
FROM insta_table_prior_top_1000
GROUP BY user_id, product_id")
pacman::p_load("caret","ROCR","lift","glmnet","MASS","e1071", "tidyverse", "dplyr", "GGally", "data.table", "readr", "plyr", "sqldf")
sqldf("SELECT user_id, product_id, COUNT(*) as Freq
FROM insta_table_prior_top_1000
GROUP BY user_id, product_id")
sqldf("SELECT user_id, product_id, product_name COUNT(*) as Freq
FROM insta_table_prior_top_1000
GROUP BY user_id, product_id")
sqldf("SELECT user_id, product_id, product_name COUNT(*) as Freq
FROM insta_table_prior_top_1000
GROUP BY user_id, product_id, product_name")
sqldf("SELECT user_id, product_id, product_name, COUNT(*) as Freq
FROM insta_table_prior_top_1000
GROUP BY user_id, product_id, product_name")
insta_table_train
user_product_prior_df <- sqldf("SELECT user_id, product_id, product_name, COUNT(*) as Freq
FROM insta_table_prior
GROUP BY user_id, product_id, product_name")
user_product_prior_df <- sqldf("SELECT user_id, product_id, product_name, COUNT(*) as Freq
FROM insta_table_prior
GROUP BY user_id, product_id, product_name")
user_product_train_df <- sqldf("SELECT user_id, product_id, product_name, COUNT(*) as Freq
FROM insta_table_train
GROUP BY user_id, product_id, product_name")
left_join(user_product_prior_df, user_product_train_df, by = user_id, product_id)
user_product_prior_df <- sqldf("SELECT user_id, product_id, product_name, COUNT(*) as Freq
FROM insta_table_prior
GROUP BY user_id, product_id, product_name")
user_product_train_df <- sqldf("SELECT user_id, product_id, product_name, COUNT(*) as Freq
FROM insta_table_train
GROUP BY user_id, product_id, product_name")
user_product_train_df
user_product_train_df
left_join(user_product_prior_df, user_product_train_df, by = c("user_id", "product_id"))
user_product_prior_df <- sqldf("SELECT user_id, product_id, product_name, COUNT(*) as Freq
FROM insta_table_prior
GROUP BY user_id, product_id, product_name")
memory.limit()
memory.limit(size=56000)
left_join(user_product_prior_df, user_product_train_df, by = c("user_id", "product_id"))
user_product_prior_df <- sqldf("SELECT user_id, product_id, product_name, COUNT(*) as Freq
FROM insta_table_prior
GROUP BY user_id, product_id, product_name")
user_product_train_df <- sqldf("SELECT user_id, product_id, product_name, COUNT(*) as Freq
FROM insta_table_train
GROUP BY user_id, product_id, product_name")
left_join(user_product_prior_df, user_product_train_df, by = c("user_id", "product_id"))
joined_prior_train <- left_join(user_product_prior_df, user_product_train_df, by = c("user_id", "product_id"))
joined_prior_train
names(joined_prior_train)[names(joined_prior_train) == "freq.x"] <- "prior_purchase_count" #number of times the product has already been purchased
joined_prior_train$Freq.y[is.na(joined_prior_train$Freq.y)] <- 0
names(joined_prior_train)[names(joined_prior_train) == "freq.y"] <- "re_order" #number of times the product has already been purchased
joined_prior_train
names(joined_prior_train)[names(joined_prior_train) == "Freq.x"] <- "prior_purchase_count" #number of times the product has already been purchased
joined_prior_train$Freq.y[is.na(joined_prior_train$Freq.y)] <- 0
names(joined_prior_train)[names(joined_prior_train) == "Freq.y"] <- "re_order" #number of times the product has already been purchased
joined_prior_train
final_df <- subset(joined_prior_train, select = -c(product_name.y))
final_df
str(final_df)
final_df$re_order <- as.factor(final_df$re_order)
str(final_df)
